#!/usr/bin/expect

# Expect script to log in to the ds server
# and send the password
# (because its CIFS mount can't do .ssh/authorized_keys)

# Also runs mosh if available, making sure to keep a
# background SSH connection to the same server instance
# to stop the server's CIFS-mount logic from ending mosh.

# Assumes ds is set up in .ssh/config,
# with password written into .ssh/ds
# (can be modified to hard-code it here)

# Silas S. Brown 2020, public domain, no warranty
# Use/modify/keep passwords at your own risk

# Uncomment if you want to keep the password here:
# set pass "********"
# Comment out if you don't want to read from .ssh/ds:
set fp [open ~/.ssh/ds r]
set pass [read -nonewline $fp]
close $fp

# This should be set to the location of mosh-server in
# the remote home directory:
set moshServer bin/mosh/bin/mosh-server

# Now ready to go.
# First, find out if we're running in Termux on Android,
if { [file exists "/data/data/com.termux/files/usr/bin"] } {
    # in which case we'll need a different PATH setting, and we
    # need to use mosh.pl for --experimental-remote-ip (so it
    # works with ControlPath)
    set ::env(PATH) "/data/data/com.termux/files/usr/bin"
    set mosh mosh.pl
    set tmp /data/data/com.termux/files/home/.ssh
} else {
    set mosh mosh
    if { [file exists "/dev/shm"] } {
        set tmp /dev/shm
    } else {
        set tmp /tmp
    }
}
# Then find out if Mosh is installed on the local system.
# We can use mosh with home-directory install on ds server
# but we MUST keep ssh at the same time to prevent the
# CIFS system from terminating mosh server on SSH logout.
# Do this without fork, for maximum compatibility:
if { [lindex $argv 0] != "" && [file exists [lindex $argv 0] ] } {
    # we are the child: keep an SSH going
    spawn ssh ds -o ControlMaster=auto -o ControlPath=$tmp/.dspath
    set timeout -1
    expect {
        "assword: " {send "$pass\r"}
        "Last login"
    }
    expect "\\\$"
    send "echo -n H;echo -n :;hostname -f\r"
    expect -re "H:(.*)\r"
    set ds "$expect_out(1,string)"
    log_user 0
    set fp [open [lindex $argv 0] w]
    puts $fp "$ds"
    close $fp
    while {1} {
        expect eof
        system sleep 10
        spawn ssh $ds -o ControlMaster=auto -o ControlPath=$tmp/.dspath
        expect {
            "assword: " {send "$pass\r"}
            "Last login"
        }
    }
} else {
    # we are not the child, check if mosh is installed
    log_user 0
    spawn /bin/bash -c "which $mosh 2>/dev/null;echo"
    expect -re "(.*)\r"
    set MoshPath "$expect_out(1,string)"
    log_user 1
    if {$MoshPath != ""} {
        set pid [pid]
        system mkfifo $tmp/$pid
        set childPid [lindex [ exec [info script] $tmp/$pid & ] 0 ]
        set fp [open $tmp/$pid r]
        set ds [read -nonewline $fp]
        close $fp
        system rm $tmp/$pid
        system echo "Read from $pid: $ds"
        spawn bash -c "$mosh --server=$moshServer --experimental-remote-ip=remote --ssh='ssh -o ControlPath=$tmp/.dspath' $ds"
        trap {
            set rows [stty rows]
            set cols [stty columns]
            stty rows $rows columns $cols < $spawn_out(slave,name)
        } WINCH
        interact
        system bash -c "kill $childPid ; clear"
    } else {
        # no mosh: just interact with plain ssh
        spawn ssh ds
        expect {
            "assword: " {send "$pass\r"}
            "Last login"
        }
        trap {
            set rows [stty rows]
            set cols [stty columns]
            stty rows $rows columns $cols < $spawn_out(slave,name)
        } WINCH
        interact
    }
}
